# useful libraries
import RPi.GPIO as GPIO
import time
import sys


# import the Morse code here
import morse

MC = morse.code()

# set GPIO numbering 
GPIO.setmode(GPIO.BCM)
GPIO.setwarnings(False)

# setup LED and button
leftLEDPin = 27
buttonPin = 25
GPIO.setup(leftLEDPin, GPIO.OUT)
GPIO.setup(buttonPin, GPIO.IN, pull_up_down = GPIO.PUD_DOWN)
time_stamp = time.time()  


# store your message
message = 'Hello Mines!'

#Set values for morse timing
unit_dot = .1
unit_dash = .3
unit_rest = .1
unit_word = .7
unit_char = .3


def buttonPress(channel):
    global time_stamp       # put in to debounce  
    time_now = time.time()  
    if (time_now - time_stamp) >= 0.3: 
        if (GPIO.input(buttonPin)):
            GPIO.output(leftLEDPin, False)
    time_stamp = time_now  
        
            
def morseCode():
    for char in message:
        time.sleep(unit_char)
        print(char)
        if (char == ' '):
            time.sleep(unit_word)  
            continue

        elif (char != '!'):
            morseChar = MC[char.upper()]
            for char in morseChar:
                if (char == '.'):
                    GPIO.output(leftLEDPin, True)
                    time.sleep(unit_dot)
                    GPIO.output(leftLEDPin, False)
                    time.sleep(unit_rest)
                elif (char == '-'):
                    GPIO.output(leftLEDPin, True)
                    time.sleep(unit_dash)
                    GPIO.output(leftLEDPin, False)
                    time.sleep(unit_rest)

GPIO.add_event_detect(buttonPin, GPIO.RISING, callback=buttonPress)
try:
    
    morseCode()
    
except (KeyboardInterrupt, SystemExit):
    print("Interrupt!")


finally:
    print("Exiting...")
    
    # cleanup the GPIO pins when done
    GPIO.cleanup()
