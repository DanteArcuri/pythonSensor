# useful libraries
import RPi.GPIO as GPIO
import time


# import the Morse code here
import morse

MC = morse.code()

# set GPIO numbering 
GPIO.setmode(GPIO.BCM)

# setup LED
leftLEDPin = 27;
GPIO.setup(leftLEDPin, GPIO.OUT)


# assign a variable for the pin numer
buttonPin = 25

# configure the GPIO pin to accept inputs, and activate the pull-up resistor
# PUD_UP for internal pull-up resistor - returns 1 when the button is released
GPIO.setup(buttonPin, GPIO.IN, pull_up_down = GPIO.PUD_DOWN)

# store your message
message = 'Hello Mines!'

unit_dot = .1
unit_dash = .3
unit_rest = .1
unit_word = .7
unit_char = .3

try:
    
    async def buttonPress():
        GPIO.input(buttonPin)
        
    async def exitProgram():
        r = await buttonPress()
        if (r == 1):
            
        
    for char in message:
        time.sleep(unit_char)
        print(char)
        if (char == ' '):
            time.sleep(unit_word)  
            continue
            
        elif (char != '!'):
            morseChar = MC[char.upper()]
            for char in morseChar: 
                if (GPIO.input(buttonPin) == 1):
                    break

                if (char == '.'):
                    GPIO.output(leftLEDPin, True)
                    time.sleep(unit_dot)
                    GPIO.output(leftLEDPin, False)
                    time.sleep(unit_rest)
                elif (char == '-'):
                    GPIO.output(leftLEDPin, True)
                    time.sleep(unit_dash)
                    GPIO.output(leftLEDPin, False)
                    time.sleep(unit_rest)

except(KeyboardInterrupt, SystemExit):
    print("Interrupt!")

finally:
    print("Exiting...")
    
    # cleanup the GPIO pins when done
    GPIO.cleanup()
